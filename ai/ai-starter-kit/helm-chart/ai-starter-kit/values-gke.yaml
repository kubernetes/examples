jupyterhub:
  singleuser:
    initContainers:
      # This init cntainer makes sure that home folder that we mount has correct owner
      - name: chown-home-mount-dir
        image: jupyterhub/k8s-singleuser-sample:4.2.0
        securityContext:
          runAsUser: 0
        command: ["chown", "jovyan", "/home/jovyan"]
        volumeMounts:
          - name: home
            mountPath: /home/jovyan
            subPath: jupyterhub_workspace

      - name: model-initializer
        image: jupyterhub/k8s-singleuser-sample:4.2.0
        env:
          - name: HF_TOKEN
            valueFrom:
              secretKeyRef:
                name: ai-starter-kit-hf-token-secret
                key: token
        command:
          - /bin/sh
          - -c
          - |
            set -e
            pip install -r /tmp/requirements.txt

            python /tmp/download_models.py

            # populate workspace with initial notebook files
            for f in /tmp/*.ipynb; do
              if [ -f "$f" ]; then
                # Use cp -n to not overwrite existing files.
                cp -n "$f" /home/jovyan/
              fi
            done
        volumeMounts:
          # This 'home' volume is created by the helm chart's 'homeMountPath' option.
          # We mount it to initContainer too, so all downloads and installations are persisted in this mounted home folder.
          - name: home
            mountPath: /home/jovyan
            subPath: jupyterhub_workspace
          - name: init-files
            mountPath: /tmp
            readOnly: true
        resources:
          requests:
            cpu: "2"
            memory: 16Gi
            ephemeral-storage: 10Gi
          limits:
            cpu: "4"
            memory: 32Gi
            ephemeral-storage: 10Gi
    cloudMetadata:
      # Without this disabled, the GKE Autopilot Warden will raise an error about container with escalated privilieges
      blockWithIptables: false
    memory:
      limit: 32G
      guarantee: 16G
    extraResource:
      limits:
        ephemeral-storage: '10G'
      guarantees:
        ephemeral-storage: '10G'
  scheduling:
    userScheduler:
      # For now we disable the scheduler because GKE Autopilot Warden does not allow using of a custom scheduler
      enabled: false

ray-cluster:
  enabled: true
  image:
    tag: 2.41.0-py312-gpu
  head:
    resources:
      requests:
        cpu: "4"
        memory: "4G"
        ephemeral-storage: 10Gi
      limits:
        cpu: "8"
        memory: "6G"
        ephemeral-storage: 10Gi
  worker:
    containerEnv:
      - name: PYTHONPATH
        value: "/mnt/ray-storage/libraries"
      - name: TMPDIR
        value: "/mnt/ray-storage/temp"
    resources:
      requests:
        cpu: "4"
        memory: "4G"
        ephemeral-storage: 10Gi
      limits:
        cpu: "8"
        memory: "6G"
        ephemeral-storage: 10Gi
    volumes:
    - name: ray-pvc-storage
      persistentVolumeClaim:
        claimName: "ai-starter-kit-ray-pvc"  # this value should'n be hardcoded. The actual value should be: {{ .Release.Name }}-models-cache-pvc
    volumeMounts:
      - name: ray-pvc-storage
        mountPath: /mnt/ray-storage
    podSecurityContext:
      fsGroup: 1000

rayPvc:
  enabled: true

modelsCachePvc:
  storageClassName: "standard-rwx"
  accessModes:
    - ReadWriteMany

localPersistence:
  enabled: false
