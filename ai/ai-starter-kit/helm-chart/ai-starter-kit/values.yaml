jupyterhub:
  nameOverride: "jupyterhub"
  # This value has to be null in order to apply release name on this chart's resources.
  # https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/b4b51301ac886511c643cc5d428b15ff38006bee/jupyterhub/values.yaml#L1
  fullnameOverride:

  singleuser:
    defaultUrl: "/lab/tree/welcome.ipynb"
    image:
      name: jupyterhub/k8s-singleuser-sample
      tag: "4.2.0"
    initContainers:
      # This init cntainer makes sure that home folder that we mount has correct owner
      - name: chown-home-mount-dir
        image: jupyterhub/k8s-singleuser-sample:4.2.0
        securityContext:
          runAsUser: 0
        command: ["chown", "jovyan", "/home/jovyan"]
        volumeMounts:
          - name: home
            mountPath: /home/jovyan
            subPath: jupyterhub_workspace

      - name: model-initializer
        image: jupyterhub/k8s-singleuser-sample:4.2.0
        env:
          - name: HF_TOKEN
            valueFrom:
              secretKeyRef:
                name: ai-starter-kit-hf-token-secret
                key: token
        command:
          - /bin/sh
          - -c
          - |
            set -e
            pip install -r /tmp/requirements.txt

            python /tmp/download_models.py

            # populate workspace with initial files
            for f in /tmp/*.ipynb; do
              if [ -f "$f" ]; then
                # Use cp -n to not overwrite existing files.
                cp -n "$f" /home/jovyan/
              fi
            done
        volumeMounts:
          # This 'home' volume is created by the helm chart's 'homeMountPath' option.
          # We mount it to initContainer too, so all downloads and installations are persisted in this mounted home folder.
          - name: home
            mountPath: /home/jovyan
            subPath: jupyterhub_workspace
          - name: init-files
            mountPath: /tmp
            readOnly: true

    storage:
      type: static
      static:
        pvcName: "ai-starter-kit-models-cache-pvc"
        subPath: "jupyterhub_workspace"
      capacity: 20Gi
      homeMountPath: /home/jovyan
      extraVolumes:
        - name: init-files
          configMap:
            name: "ai-starter-kit-init-files"
    # This environment variables list have its own format: https://z2jh.jupyter.org/en/latest/resources/reference.html#singleuser-extraenv
    extraEnv:
      HF_TOKEN:
        name: HF_TOKEN
        valueFrom:
          secretKeyRef:
            name: ai-starter-kit-hf-token-secret
            key: token
      RAY_ADDRESS: "ai-starter-kit-kuberay-head-svc:10001"
      MLFLOW_TRACKING_URI: "http://ai-starter-kit-mlflow:5000"
  hub:
    db:
      type: sqlite-pvc
      pvc:
        annotations:
          # Without this helm will not keep the pvc after uninstallation
          # https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/3718
          helm.sh/resource-policy: keep
    extraConfig:
      00-dummy-authenticator: |
        c.DummyAuthenticator.password = "sneakypass"
      01-spawner-timeouts: |
        c.KubeSpawner.start_timeout = 1800
ray-cluster:
  image:
    tag: 2.41.0-py311-gpu
  head:
    serviceType: ClusterIP
    resources:
      requests:
        cpu: "1"
        memory: "2G"
        ephemeral-storage: 10Gi
      limits:
        cpu: "4"
        memory: "8G"
        ephemeral-storage: 10Gi
  worker:
    resources:
      requests:
        cpu: "1"
        memory: "2G"
        ephemeral-storage: 10Gi
      limits:
        cpu: "4"
        memory: "8G"
        ephemeral-storage: 10Gi

huggingface:
  # Provide your Hugging Face token here to download gated or private models.
  # It is recommended to set this via --set or a separate values file, e.g.,
  # --set huggingface.token=hf_...
  token: ""

modelsCachePvc: # check this out for GKE
  enabled: false
  # To use the default StorageClass, set storageClassName to null or omit it.
  # To use a specific StorageClass (e.g. "standard-rwo" on GKE), provide its name.
  # To create a PVC that doesn't request any StorageClass, set it to an empty string ("").
  storageClassName: "standard-rwo"
  accessModes:
    - ReadWriteOnce
  size: 10Gi

localPersistence:
  # For local development with minikube, this allows persisting the models-cache
  # on the host machine, surviving `minikube stop/start`.
  # 1. Create a directory on your host: `mkdir -p /data/models-cache`
  # 2. Start minikube with the mount: `minikube start --mount --mount-string="/data/models-cache:/data/models-cache"`
  # 3. Set enabled to true below, or via `--set localPersistence.enabled=true`
  enabled: false
  # This path must match the destination path inside the minikube node.
  hostPath: "/tmp/models-cache"

ollama:
  enabled: true
  ollama:
    models:
      pull:
        - gemma3
  persistentVolume:
    enabled: true
    existingClaim: "ai-starter-kit-models-cache-pvc"
    subPath: "ollama"


ramalama:
  enabled: true
  command: ["sh", "-c" , "trap 'exit 0' TERM; while true; do sleep 60 & wait; done"]
  image:
    repository: "quay.io/ramalama/ramalama"
    tag: "latest"
    pullPolicy: IfNotPresent

    
